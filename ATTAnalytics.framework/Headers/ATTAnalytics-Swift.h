// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import CoreData;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class ATTAnalyticsConfiguration;
@class ATTCustomEvent;

SWIFT_CLASS("_TtC12ATTAnalytics12ATTAnalytics")
@interface ATTAnalytics : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TrackingNotification;)
+ (NSString * _Nonnull)TrackingNotification;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CrashTrackingNotification;)
+ (NSString * _Nonnull)CrashTrackingNotification;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IdentifyNotification;)
+ (NSString * _Nonnull)IdentifyNotification;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LoggoutNotification;)
+ (NSString * _Nonnull)LoggoutNotification;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kAppLanguage;)
+ (NSString * _Nonnull)kAppLanguage;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kAppVariant;)
+ (NSString * _Nonnull)kAppVariant;
@property (nonatomic, strong) ATTAnalyticsConfiguration * _Null_unspecified analyticsConfiguration;
/**
  Shared Object
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ATTAnalytics * _Nonnull helper;)
+ (ATTAnalytics * _Nonnull)helper;
/**
  This Analytics initate to track the app event also pass appConfiguration objects to
  \param appConfiguration ATTAnalyticsConfiguration instance here define some configuration settings.

*/
- (void)beginTracking:(ATTAnalyticsConfiguration * _Nonnull)appConfiguration;
/**
  Can be called manually for Manual event tracking
  \param keyword Event name

  \param arguments customArguments is used when an object requires to trigger event with dynamic values

  \param event ATTCustomEvent instance

*/
- (void)registerForTrackingWithAppSpecificKeyword:(NSString * _Nullable)keyword customArguments:(NSDictionary<NSString *, id> * _Nullable)arguments customEvent:(ATTCustomEvent * _Nullable)event;
/**
  Used to receive the crashlog events
  Must be called once inside AppDelegateâ€™s <em>applicationDidBecomeActive</em>
*/
- (void)registerForCrashLogging;
/**
  User info
  \param userId userID string

  \param profile userProfile Dictionary

*/
- (void)identifyUserWithUserID:(NSString * _Nonnull)userId userProfile:(NSDictionary<NSString *, id> * _Nullable)profile;
/**
  Reset User
*/
- (void)resetUser;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12ATTAnalytics25ATTAnalyticsConfiguration")
@interface ATTAnalyticsConfiguration : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TrackingTypeAuto;)
+ (NSString * _Nonnull)TrackingTypeAuto;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TrackingTypeManual;)
+ (NSString * _Nonnull)TrackingTypeManual;
/**
  <ul>
    <li>
      appID: application ID
    </li>
  </ul>
*/
@property (nonatomic, copy) NSString * _Null_unspecified appID;
/**
  configure URL by end user
*/
@property (nonatomic, copy) NSString * _Nullable serverURL;
/**
  trackingStateTypesString : This for Objc for setting state tracking type it may Auto or Manual
*/
@property (nonatomic, copy) NSString * _Nullable trackingStateTypesString;
/**
  trackingMethodTypesString : This for Objc for setting method tracking type it may Auto or Manual
*/
@property (nonatomic, copy) NSString * _Nullable trackingMethodTypesString;
/**
  appInformationDictionary: App information dictionary
*/
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable appInformationDictionary;
/**
  appConfigurationDictionary : App configuration Dictionary
*/
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable appConfigurationDictionary;
/**
  isfrmaeWorkDebug: Bool parameter.Default will be false
*/
@property (nonatomic) BOOL isDebugFrameWork;
/**
  Custom initialise
  \param applicationID application ID

*/
- (nonnull instancetype)init:(NSString * _Nonnull)applicationID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12ATTAnalytics14ATTCustomEvent")
@interface ATTCustomEvent : NSObject
- (void)eventStarted;
- (void)eventFinished;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("Events")
@interface Events : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;
@class NSDate;

@interface Events (SWIFT_EXTENSION(ATTAnalytics))
@property (nonatomic, strong) NSData * _Nullable customParam;
@property (nonatomic, copy) NSString * _Nullable dataURL;
@property (nonatomic) double eventDuration;
@property (nonatomic, copy) NSString * _Nullable eventName;
@property (nonatomic, strong) NSDate * _Nullable eventStartTime;
@property (nonatomic, copy) NSString * _Nullable eventType;
@property (nonatomic) double latitude;
@property (nonatomic) double longitude;
@property (nonatomic, copy) NSString * _Nullable screenViewID;
@end


SWIFT_CLASS_NAMED("Screen")
@interface Screen : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface Screen (SWIFT_EXTENSION(ATTAnalytics))
@property (nonatomic) double latitude;
@property (nonatomic) double longitude;
@property (nonatomic, copy) NSString * _Nullable presentScreen;
@property (nonatomic, copy) NSString * _Nullable previousScreen;
@property (nonatomic, copy) NSString * _Nullable previousScreenTitle;
@property (nonatomic, copy) NSString * _Nullable screenTitle;
@property (nonatomic, copy) NSString * _Nullable screenViewID;
@property (nonatomic) double screenWatchDuration;
@property (nonatomic, strong) NSDate * _Nullable screenWatchedTime;
@property (nonatomic) BOOL syncStatus;
@end


@interface UIDevice (SWIFT_EXTENSION(ATTAnalytics))
@property (nonatomic, readonly, copy) NSString * _Nonnull modelType;
@end

#pragma clang diagnostic pop
